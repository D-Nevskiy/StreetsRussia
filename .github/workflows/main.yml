name: StreetsRussia workflow

on:
  push:
    branches: [ dev ]


jobs:
  test_flake8:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          pip install -r backend/requirements.txt

      - name: Test flake8
        run:
          python -m flake8 --config backend/setup.cfg

  build_backend_and_push_to_docker_hub:
    name: Push Docker image backend to Docker Hub
    runs-on: ubuntu-latest
    needs: test_flake8
    steps:
      - name: Check out the repo DockerHub
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: backend/
          push: true
          tags: dnevskiy/streets_backend:latest

  build_frontend_and_push_to_docker_hub:
    name: Push Docker image frontend to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo DockerHub
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: submodules recursively update
        run: git submodule update --remote --merge

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: frontend
          file: frontend/Dockerfile
          push: true
          tags: dnevskiy/streets_frontend:latest

  build_nginx_and_push_to_docker_hub:
    name: Push Docker image nginx to Docker Hub
    runs-on: ubuntu-latest
    needs: build_frontend_and_push_to_docker_hub
    steps:
      - name: Check out the repo DockerHub
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: nginx/
          push: true
          tags: dnevskiy/streets_nginx:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_backend_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_nginx_and_push_to_docker_hub
    steps:
      - name: exec remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            sudo docker-compose pull
            sudo docker compose down
            rm .env
            touch .env
            echo DB_ENGINE=${{ secrets.DEBUG }} >> .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo ALLOWED_HOST=${{ secrets.ALLOWED_HOST }} >> .env
            echo EMAIL_HOST=${{ secrets.EMAIL_HOST }} >> .env
            echo EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} >> .env
            echo EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} >> .env
            echo EMAIL_PORT=${{ secrets.EMAIL_PORT }} >> .env
            echo EMAIL_USE_SSL=${{ secrets.EMAIL_USE_SSL }} >> .env
            sudo docker-compose up -d
            sudo docker compose exec web python manage.py makemigrations events news user
            sudo docker compose exec web python manage.py migrate
            sudo docker compose exec web python manage.py collectstatic --noinput
